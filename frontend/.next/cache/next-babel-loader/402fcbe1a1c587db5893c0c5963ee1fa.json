{"ast":null,"code":"import _slicedToArray from \"D:/React/Advanced-React/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"D:/React/Advanced-React/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from \"react\";\n\nfunction useForm() {\n  _s();\n\n  var initial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  // create a state object for our input\n  var _useState = useState(initial),\n      inputs = _useState[0],\n      setInputs = _useState[1];\n\n  function handleChange(e) {\n    var _e$target = e.target,\n        value = _e$target.value,\n        name = _e$target.name,\n        type = _e$target.type;\n\n    if (type === \"number\") {\n      value = Number(value);\n    }\n\n    if (type === \"file\") {\n      value = e.target.files;\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, _defineProperty({}, name, value)));\n  }\n\n  function resetForm() {\n    setInputs(initial);\n  }\n  /*\r\n         take the [input] object and turn it into an array with Object.entries()\r\n         then map through the array and destructure the key and value and for each key, we set the value to empty\r\n     */\n\n\n  function clearForm() {\n    var blankState = Object.fromEntries(Object.entries(inputs).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      return [key, \"\"];\n    }));\n    setInputs(blankState);\n  } // return the things we want to surface\n\n\n  return {\n    inputs: inputs,\n    handleChange: handleChange,\n    resetForm: resetForm,\n    clearForm: clearForm\n  };\n}\n\n_s(useForm, \"0tjT+aoDVbAe0wsQZsq9AKLCE20=\");\n\nexport default useForm;","map":{"version":3,"sources":["D:/React/Advanced-React/Advanced-React/sick-fits/frontend/lib/useForm.js"],"names":["useState","useForm","initial","inputs","setInputs","handleChange","e","target","value","name","type","Number","files","resetForm","clearForm","blankState","Object","fromEntries","entries","map","key"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,SAASC,OAAT,GAA+B;AAAA;;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAC9B;AAD8B,kBAEFF,QAAQ,CAACE,OAAD,CAFN;AAAA,MAEvBC,MAFuB;AAAA,MAEfC,SAFe;;AAI9B,WAASC,YAAT,CAAsBC,CAAtB,EAAyB;AAAA,oBACIA,CAAC,CAACC,MADN;AAAA,QAClBC,KADkB,aAClBA,KADkB;AAAA,QACXC,IADW,aACXA,IADW;AAAA,QACLC,IADK,aACLA,IADK;;AAExB,QAAIA,IAAI,KAAK,QAAb,EAAuB;AACtBF,MAAAA,KAAK,GAAGG,MAAM,CAACH,KAAD,CAAd;AACA;;AAED,QAAIE,IAAI,KAAK,MAAb,EAAqB;AACpBF,MAAAA,KAAK,GAAGF,CAAC,CAACC,MAAF,CAASK,KAAjB;AACA;;AACDR,IAAAA,SAAS,iCACLD,MADK,2BAEPM,IAFO,EAEAD,KAFA,GAAT;AAIA;;AAED,WAASK,SAAT,GAAqB;AACpBT,IAAAA,SAAS,CAACF,OAAD,CAAT;AACA;AAED;AACD;AACA;AACA;;;AACC,WAASY,SAAT,GAAqB;AACpB,QAAMC,UAAU,GAAGC,MAAM,CAACC,WAAP,CAClBD,MAAM,CAACE,OAAP,CAAef,MAAf,EAAuBgB,GAAvB,CAA2B;AAAA;AAAA,UAAEC,GAAF;AAAA,UAAOZ,KAAP;;AAAA,aAAkB,CAACY,GAAD,EAAM,EAAN,CAAlB;AAAA,KAA3B,CADkB,CAAnB;AAGAhB,IAAAA,SAAS,CAACW,UAAD,CAAT;AACA,GAhC6B,CAkC9B;;;AACA,SAAO;AACNZ,IAAAA,MAAM,EAANA,MADM;AAENE,IAAAA,YAAY,EAAZA,YAFM;AAGNQ,IAAAA,SAAS,EAATA,SAHM;AAINC,IAAAA,SAAS,EAATA;AAJM,GAAP;AAMA;;GAzCQb,O;;AA2CT,eAAeA,OAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nfunction useForm(initial = {}) {\r\n\t// create a state object for our input\r\n\tconst [inputs, setInputs] = useState(initial);\r\n\r\n\tfunction handleChange(e) {\r\n\t\tlet { value, name, type } = e.target;\r\n\t\tif (type === \"number\") {\r\n\t\t\tvalue = Number(value);\r\n\t\t}\r\n\r\n\t\tif (type === \"file\") {\r\n\t\t\tvalue = e.target.files;\r\n\t\t}\r\n\t\tsetInputs({\r\n\t\t\t...inputs,\r\n\t\t\t[name]: value,\r\n\t\t});\r\n\t}\r\n\r\n\tfunction resetForm() {\r\n\t\tsetInputs(initial);\r\n\t}\r\n\r\n\t/*\r\n        take the [input] object and turn it into an array with Object.entries()\r\n        then map through the array and destructure the key and value and for each key, we set the value to empty\r\n    */\r\n\tfunction clearForm() {\r\n\t\tconst blankState = Object.fromEntries(\r\n\t\t\tObject.entries(inputs).map(([key, value]) => [key, \"\"])\r\n\t\t);\r\n\t\tsetInputs(blankState);\r\n\t}\r\n\r\n\t// return the things we want to surface\r\n\treturn {\r\n\t\tinputs,\r\n\t\thandleChange,\r\n\t\tresetForm,\r\n\t\tclearForm,\r\n\t};\r\n}\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}