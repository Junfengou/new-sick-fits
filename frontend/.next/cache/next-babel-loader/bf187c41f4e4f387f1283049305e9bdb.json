{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\React\\\\Advanced-React\\\\Advanced-React\\\\sick-fits\\\\frontend\\\\components\\\\UpdateProduct.js\";\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { SINGLE_ITEM_QUERY } from \"./SingleProduct\";\nimport { useQuery } from \"@apollo/client\";\nconst UPDATE_PRODUCT_MUTATION = gql`\n\tmutation UPDATE_PRODUCT_MUTATION(\n\t\t$id: ID!\n\t\t$name: String\n\t\t$description: String\n\t\t$price: Int\n\t) {\n\t\tupdateProduct(\n\t\t\tid: $id\n\t\t\tdata: { id: $id, name: $name, description: $description, price: $price }\n\t\t) {\n\t\t\tid\n\t\t\tname\n\t\t\tdescription\n\t\t\tprice\n\t\t}\n\t}\n`;\n\nfunction UpdateProduct({\n  id\n}) {\n  // 1. Get the existing product\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(SINGLE_ITEM_QUERY, {\n    variables: {\n      id\n    }\n  });\n  const {\n    Product: {\n      description,\n      name,\n      price\n    }\n  } = data; // 2. Get the mutation to update the product\n  // 3. Get the form to handle the updates\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Update this product: \", name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 3\n  }, this);\n}\n\nexport default UpdateProduct;","map":{"version":3,"sources":["D:/React/Advanced-React/Advanced-React/sick-fits/frontend/components/UpdateProduct.js"],"names":["React","gql","SINGLE_ITEM_QUERY","useQuery","UPDATE_PRODUCT_MUTATION","UpdateProduct","id","data","loading","error","variables","Product","description","name","price"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,MAAMC,uBAAuB,GAAGH,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBA;;AAmBA,SAASI,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAA+B;AAC9B;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BN,QAAQ,CAACD,iBAAD,EAAoB;AAC5DQ,IAAAA,SAAS,EAAE;AACVJ,MAAAA;AADU;AADiD,GAApB,CAAzC;AAKA,QAAM;AACLK,IAAAA,OAAO,EAAE;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,IAAf;AAAqBC,MAAAA;AAArB;AADJ,MAEFP,IAFJ,CAP8B,CAU9B;AAEA;;AACA,sBACC;AAAA,2BACC;AAAA,0CAAyBM,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAKA;;AAED,eAAeR,aAAf","sourcesContent":["import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { SINGLE_ITEM_QUERY } from \"./SingleProduct\";\r\nimport { useQuery } from \"@apollo/client\";\r\n\r\nconst UPDATE_PRODUCT_MUTATION = gql`\r\n\tmutation UPDATE_PRODUCT_MUTATION(\r\n\t\t$id: ID!\r\n\t\t$name: String\r\n\t\t$description: String\r\n\t\t$price: Int\r\n\t) {\r\n\t\tupdateProduct(\r\n\t\t\tid: $id\r\n\t\t\tdata: { id: $id, name: $name, description: $description, price: $price }\r\n\t\t) {\r\n\t\t\tid\r\n\t\t\tname\r\n\t\t\tdescription\r\n\t\t\tprice\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nfunction UpdateProduct({ id }) {\r\n\t// 1. Get the existing product\r\n\tconst { data, loading, error } = useQuery(SINGLE_ITEM_QUERY, {\r\n\t\tvariables: {\r\n\t\t\tid,\r\n\t\t},\r\n\t});\r\n\tconst {\r\n\t\tProduct: { description, name, price },\r\n\t} = data;\r\n\t// 2. Get the mutation to update the product\r\n\r\n\t// 3. Get the form to handle the updates\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p>Update this product: {name}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default UpdateProduct;\r\n"]},"metadata":{},"sourceType":"module"}