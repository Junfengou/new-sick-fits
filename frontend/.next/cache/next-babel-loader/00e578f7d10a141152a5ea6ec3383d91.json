{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\React\\\\Advanced-React\\\\Advanced-React\\\\sick-fits\\\\frontend\\\\components\\\\UpdateProduct.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { SINGLE_ITEM_QUERY } from \"./SingleProduct\";\nimport { useQuery } from \"@apollo/client\";\n\nfunction UpdateProduct(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  // 1. Get the existing product\n  var _useQuery = useQuery(SINGLE_ITEM_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  var _data$Product = data.Product,\n      description = _data$Product.description,\n      name = _data$Product.name,\n      price = _data$Product.price; // 2. Get the mutation to update the product\n  // 3. Get the form to handle the updates\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Update this product: \", name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 3\n  }, this);\n}\n\n_s(UpdateProduct, \"tP+6C5plfRwxqCbBj3cMUcL7Opk=\", false, function () {\n  return [useQuery];\n});\n\n_c = UpdateProduct;\nexport default UpdateProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateProduct\");","map":{"version":3,"sources":["D:/React/Advanced-React/Advanced-React/sick-fits/frontend/components/UpdateProduct.js"],"names":["React","gql","SINGLE_ITEM_QUERY","useQuery","UpdateProduct","id","variables","data","loading","error","Product","description","name","price"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SAASC,QAAT,QAAyB,gBAAzB;;AAEA,SAASC,aAAT,OAA+B;AAAA;;AAAA,MAANC,EAAM,QAANA,EAAM;;AAC9B;AAD8B,kBAEGF,QAAQ,CAACD,iBAAD,EAAoB;AAC5DI,IAAAA,SAAS,EAAE;AACVD,MAAAA,EAAE,EAAFA;AADU;AADiD,GAApB,CAFX;AAAA,MAEtBE,IAFsB,aAEtBA,IAFsB;AAAA,MAEhBC,OAFgB,aAEhBA,OAFgB;AAAA,MAEPC,KAFO,aAEPA,KAFO;;AAAA,sBAS1BF,IAT0B,CAQ7BG,OAR6B;AAAA,MAQlBC,WARkB,iBAQlBA,WARkB;AAAA,MAQLC,IARK,iBAQLA,IARK;AAAA,MAQCC,KARD,iBAQCA,KARD,EAU9B;AAEA;;AACA,sBACC;AAAA,2BACC;AAAA,0CAAyBD,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAKA;;GAlBQR,a;UAEyBD,Q;;;KAFzBC,a;AAoBT,eAAeA,aAAf","sourcesContent":["import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { SINGLE_ITEM_QUERY } from \"./SingleProduct\";\r\nimport { useQuery } from \"@apollo/client\";\r\n\r\nfunction UpdateProduct({ id }) {\r\n\t// 1. Get the existing product\r\n\tconst { data, loading, error } = useQuery(SINGLE_ITEM_QUERY, {\r\n\t\tvariables: {\r\n\t\t\tid,\r\n\t\t},\r\n\t});\r\n\tconst {\r\n\t\tProduct: { description, name, price },\r\n\t} = data;\r\n\t// 2. Get the mutation to update the product\r\n\r\n\t// 3. Get the form to handle the updates\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p>Update this product: {name}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default UpdateProduct;\r\n"]},"metadata":{},"sourceType":"module"}