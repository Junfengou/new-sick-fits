{"ast":null,"code":"/*\r\n    IMPORTANT NOTE: watch video #19\r\n*/\nimport { ApolloClient, ApolloLink, InMemoryCache } from \"@apollo/client\";\nimport { onError } from \"@apollo/link-error\";\nimport { getDataFromTree } from \"@apollo/react-ssr\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport withApollo from \"next-with-apollo\";\nimport { endpoint, prodEndpoint } from \"../config\";\n\nfunction createClient({\n  headers,\n  initialState\n}) {\n  return new ApolloClient({\n    link: ApolloLink.from([onError(({\n      graphQLErrors,\n      networkError\n    }) => {\n      if (graphQLErrors) graphQLErrors.forEach(({\n        message,\n        locations,\n        path\n      }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n      if (networkError) console.log(`[Network error]: ${networkError}. Backend is unreachable. Is it running?`);\n    }), // this uses apollo-link-http under the hood, so all the options here come from that package\n    createUploadLink({\n      uri: true ? endpoint : prodEndpoint,\n      fetchOptions: {\n        credentials: \"include\"\n      },\n      // pass the headers along from this request. This enables SSR with logged in state\n      headers\n    })]),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {// TODO: We will add this together!\n            // allProducts: paginationField(),\n          }\n        }\n      }\n    }).restore(initialState || {})\n  });\n}\n\nexport default withApollo(createClient, {\n  getDataFromTree\n});","map":{"version":3,"sources":["D:/React/Advanced-React/Advanced-React/sick-fits/frontend/lib/withData.js"],"names":["ApolloClient","ApolloLink","InMemoryCache","onError","getDataFromTree","createUploadLink","withApollo","endpoint","prodEndpoint","createClient","headers","initialState","link","from","graphQLErrors","networkError","forEach","message","locations","path","console","log","uri","fetchOptions","credentials","cache","typePolicies","Query","fields","restore"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,YAAT,EAAuBC,UAAvB,EAAmCC,aAAnC,QAAwD,gBAAxD;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,WAAvC;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAtB,EAAiD;AAChD,SAAO,IAAIX,YAAJ,CAAiB;AACvBY,IAAAA,IAAI,EAAEX,UAAU,CAACY,IAAX,CAAgB,CACrBV,OAAO,CAAC,CAAC;AAAEW,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,KAAD,KAAqC;AAC5C,UAAID,aAAJ,EACCA,aAAa,CAACE,OAAd,CAAsB,CAAC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,SAAX;AAAsBC,QAAAA;AAAtB,OAAD,KACrBC,OAAO,CAACC,GAAR,CACE,6BAA4BJ,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EAD7E,CADD;AAKD,UAAIJ,YAAJ,EACCK,OAAO,CAACC,GAAR,CACE,oBAAmBN,YAAa,0CADlC;AAGD,KAXM,CADc,EAcrB;AACAV,IAAAA,gBAAgB,CAAC;AAChBiB,MAAAA,GAAG,EAAE,OAAyCf,QAAzC,GAAoDC,YADzC;AAEhBe,MAAAA,YAAY,EAAE;AACbC,QAAAA,WAAW,EAAE;AADA,OAFE;AAMhB;AACAd,MAAAA;AAPgB,KAAD,CAfK,CAAhB,CADiB;AA0BvBe,IAAAA,KAAK,EAAE,IAAIvB,aAAJ,CAAkB;AACxBwB,MAAAA,YAAY,EAAE;AACbC,QAAAA,KAAK,EAAE;AACNC,UAAAA,MAAM,EAAE,CACP;AACA;AAFO;AADF;AADM;AADU,KAAlB,EASJC,OATI,CASIlB,YAAY,IAAI,EATpB;AA1BgB,GAAjB,CAAP;AAqCA;;AAED,eAAeL,UAAU,CAACG,YAAD,EAAe;AAAEL,EAAAA;AAAF,CAAf,CAAzB","sourcesContent":["/*\r\n    IMPORTANT NOTE: watch video #19\r\n*/\r\n\r\nimport { ApolloClient, ApolloLink, InMemoryCache } from \"@apollo/client\";\r\nimport { onError } from \"@apollo/link-error\";\r\nimport { getDataFromTree } from \"@apollo/react-ssr\";\r\nimport { createUploadLink } from \"apollo-upload-client\";\r\nimport withApollo from \"next-with-apollo\";\r\nimport { endpoint, prodEndpoint } from \"../config\";\r\n\r\nfunction createClient({ headers, initialState }) {\r\n\treturn new ApolloClient({\r\n\t\tlink: ApolloLink.from([\r\n\t\t\tonError(({ graphQLErrors, networkError }) => {\r\n\t\t\t\tif (graphQLErrors)\r\n\t\t\t\t\tgraphQLErrors.forEach(({ message, locations, path }) =>\r\n\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\tif (networkError)\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t`[Network error]: ${networkError}. Backend is unreachable. Is it running?`\r\n\t\t\t\t\t);\r\n\t\t\t}),\r\n\r\n\t\t\t// this uses apollo-link-http under the hood, so all the options here come from that package\r\n\t\t\tcreateUploadLink({\r\n\t\t\t\turi: process.env.NODE_ENV === \"development\" ? endpoint : prodEndpoint,\r\n\t\t\t\tfetchOptions: {\r\n\t\t\t\t\tcredentials: \"include\",\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// pass the headers along from this request. This enables SSR with logged in state\r\n\t\t\t\theaders,\r\n\t\t\t}),\r\n\t\t]),\r\n\t\tcache: new InMemoryCache({\r\n\t\t\ttypePolicies: {\r\n\t\t\t\tQuery: {\r\n\t\t\t\t\tfields: {\r\n\t\t\t\t\t\t// TODO: We will add this together!\r\n\t\t\t\t\t\t// allProducts: paginationField(),\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t}).restore(initialState || {}),\r\n\t});\r\n}\r\n\r\nexport default withApollo(createClient, { getDataFromTree });\r\n"]},"metadata":{},"sourceType":"module"}