{"ast":null,"code":"import React from \"react\";\nimport { PAGINATION_QUERY } from \"../components/Pagination\";\n\nfunction paginationField() {\n  return {\n    keyArgs: false,\n    // Tells Apollo that I will take care everything\n    // args: The skip value that's passed in    cache: Apollo cache\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      console.log({\n        existing: existing,\n        args: args,\n        cache: cache\n      });\n      var skip = args.skip,\n          first = args.first; //Read the number of items on the page from the cache\n\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first); // Check if we have existing items\n\n      var items = existing.slice(skip, skip + first).filter(function (item) {\n        return item;\n      });\n\n      if (items.length !== first) {\n        // We don't have any items, we must go to the network to fetch them\n        return false;\n      } // If there are items, just return the items from the cache\n\n\n      if (item.length) {\n        console.log(\"There are \".concat(items.length, \" items in the cache! Gonna send them to apollo\"));\n        return items;\n      }\n\n      return false; // fallback to network\n      // When Apollo tries to query for all Products, it will first ask the read function for those items\n      // Either do 1 of 2 things:\n      // 1. Return the items because they are already in the cache\n      // OR\n      // 2. Return false from here [create a network request]\n    },\n    merge: function merge(existing, incoming, _ref2) {\n      var args = _ref2.args;\n      // This runs when the Apollo client comes back from the Keystone with the products\n      console.log(\"Merging items from the network \".concat(incoming.length));\n      console.log({\n        incoming: incoming\n      });\n    }\n  };\n}\n\nexport default paginationField;","map":{"version":3,"sources":["D:/React/Advanced-React/Advanced-React/sick-fits/frontend/lib/paginationField.js"],"names":["React","PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","console","log","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","item","length","merge","incoming"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,0BAAjC;;AAEA,SAASC,eAAT,GAA2B;AAC1B,SAAO;AACNC,IAAAA,OAAO,EAAE,KADH;AACU;AAEhB;AACAC,IAAAA,IAJM,kBAI+B;AAAA;;AAAA,UAAhCC,QAAgC,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AACpCC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEJ,QAAAA,QAAQ,EAARA,QAAF;AAAYC,QAAAA,IAAI,EAAJA,IAAZ;AAAkBC,QAAAA,KAAK,EAALA;AAAlB,OAAZ;AADoC,UAE5BG,IAF4B,GAEZJ,IAFY,CAE5BI,IAF4B;AAAA,UAEtBC,KAFsB,GAEZL,IAFY,CAEtBK,KAFsB,EAIpC;;AACA,UAAMC,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEb;AAAT,OAAhB,CAAb;AACA,UAAMc,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AAEA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CAToC,CAWpC;;AACA,UAAMU,KAAK,GAAGhB,QAAQ,CAACiB,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAACC,IAAD;AAAA,eAAUA,IAAV;AAAA,OAA1C,CAAd;;AACA,UAAIH,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC3B;AACA,eAAO,KAAP;AACA,OAhBmC,CAkBpC;;;AACA,UAAIa,IAAI,CAACC,MAAT,EAAiB;AAChBjB,QAAAA,OAAO,CAACC,GAAR,qBACcY,KAAK,CAACI,MADpB;AAGA,eAAOJ,KAAP;AACA;;AAED,aAAO,KAAP,CA1BoC,CA0BtB;AAEd;AAEA;AAEA;AAEA;AAEA;AACA,KAzCK;AA0CNK,IAAAA,KA1CM,iBA0CArB,QA1CA,EA0CUsB,QA1CV,SA0C8B;AAAA,UAARrB,IAAQ,SAARA,IAAQ;AACnC;AACAE,MAAAA,OAAO,CAACC,GAAR,0CAA8CkB,QAAQ,CAACF,MAAvD;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEkB,QAAAA,QAAQ,EAARA;AAAF,OAAZ;AACA;AA9CK,GAAP;AAgDA;;AAED,eAAezB,eAAf","sourcesContent":["import React from \"react\";\r\nimport { PAGINATION_QUERY } from \"../components/Pagination\";\r\n\r\nfunction paginationField() {\r\n\treturn {\r\n\t\tkeyArgs: false, // Tells Apollo that I will take care everything\r\n\r\n\t\t// args: The skip value that's passed in    cache: Apollo cache\r\n\t\tread(existing = [], { args, cache }) {\r\n\t\t\tconsole.log({ existing, args, cache });\r\n\t\t\tconst { skip, first } = args;\r\n\r\n\t\t\t//Read the number of items on the page from the cache\r\n\t\t\tconst data = cache.readQuery({ query: PAGINATION_QUERY });\r\n\t\t\tconst count = data?._allProductsMeta?.count;\r\n\r\n\t\t\tconst page = skip / first + 1;\r\n\t\t\tconst pages = Math.ceil(count / first);\r\n\r\n\t\t\t// Check if we have existing items\r\n\t\t\tconst items = existing.slice(skip, skip + first).filter((item) => item);\r\n\t\t\tif (items.length !== first) {\r\n\t\t\t\t// We don't have any items, we must go to the network to fetch them\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// If there are items, just return the items from the cache\r\n\t\t\tif (item.length) {\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t`There are ${items.length} items in the cache! Gonna send them to apollo`\r\n\t\t\t\t);\r\n\t\t\t\treturn items;\r\n\t\t\t}\r\n\r\n\t\t\treturn false; // fallback to network\r\n\r\n\t\t\t// When Apollo tries to query for all Products, it will first ask the read function for those items\r\n\r\n\t\t\t// Either do 1 of 2 things:\r\n\r\n\t\t\t// 1. Return the items because they are already in the cache\r\n\r\n\t\t\t// OR\r\n\r\n\t\t\t// 2. Return false from here [create a network request]\r\n\t\t},\r\n\t\tmerge(existing, incoming, { args }) {\r\n\t\t\t// This runs when the Apollo client comes back from the Keystone with the products\r\n\t\t\tconsole.log(`Merging items from the network ${incoming.length}`);\r\n\t\t\tconsole.log({ incoming });\r\n\t\t},\r\n\t};\r\n}\r\n\r\nexport default paginationField;\r\n"]},"metadata":{},"sourceType":"module"}