{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from \"react\";\n\nfunction useForm(initial = {}) {\n  // create a state object for our input\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initial);\n  const initialValue = Object.values(initial);\n  useEffect(() => {\n    setInputs(initial);\n  }, [initialValue]);\n\n  function handleChange(e) {\n    let {\n      value,\n      name,\n      type\n    } = e.target;\n\n    if (type === \"number\") {\n      value = Number(value);\n    }\n\n    if (type === \"file\") {\n      [value] = e.target.files;\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [name]: value\n    }));\n  }\n\n  function resetForm() {\n    setInputs(initial);\n  }\n  /*\r\n         take the [input] object and turn it into an array with Object.entries()\r\n         then map through the array and destructure the key and value and for each key, we set the value to empty\r\n     */\n\n\n  function clearForm() {\n    const blankState = Object.fromEntries(Object.entries(inputs).map(([key, value]) => [key, \"\"]));\n    setInputs(blankState);\n  } // return the things we want to surface\n\n\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm\n  };\n}\n\nexport default useForm;","map":{"version":3,"sources":["D:/React/Advanced-React/Advanced-React/sick-fits/frontend/lib/useForm.js"],"names":["useState","useEffect","useForm","initial","inputs","setInputs","initialValue","Object","values","handleChange","e","value","name","type","target","Number","files","resetForm","clearForm","blankState","fromEntries","entries","map","key"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,OAAT,CAAiBC,OAAO,GAAG,EAA3B,EAA+B;AAC9B;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBL,QAAQ,CAACG,OAAD,CAApC;AACA,QAAMG,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAcL,OAAd,CAArB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACfI,IAAAA,SAAS,CAACF,OAAD,CAAT;AACA,GAFQ,EAEN,CAACG,YAAD,CAFM,CAAT;;AAIA,WAASG,YAAT,CAAsBC,CAAtB,EAAyB;AACxB,QAAI;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAAwBH,CAAC,CAACI,MAA9B;;AACA,QAAID,IAAI,KAAK,QAAb,EAAuB;AACtBF,MAAAA,KAAK,GAAGI,MAAM,CAACJ,KAAD,CAAd;AACA;;AAED,QAAIE,IAAI,KAAK,MAAb,EAAqB;AACpB,OAACF,KAAD,IAAUD,CAAC,CAACI,MAAF,CAASE,KAAnB;AACA;;AACDX,IAAAA,SAAS,iCACLD,MADK;AAER,OAACQ,IAAD,GAAQD;AAFA,OAAT;AAIA;;AAED,WAASM,SAAT,GAAqB;AACpBZ,IAAAA,SAAS,CAACF,OAAD,CAAT;AACA;AAED;AACD;AACA;AACA;;;AACC,WAASe,SAAT,GAAqB;AACpB,UAAMC,UAAU,GAAGZ,MAAM,CAACa,WAAP,CAClBb,MAAM,CAACc,OAAP,CAAejB,MAAf,EAAuBkB,GAAvB,CAA2B,CAAC,CAACC,GAAD,EAAMZ,KAAN,CAAD,KAAkB,CAACY,GAAD,EAAM,EAAN,CAA7C,CADkB,CAAnB;AAGAlB,IAAAA,SAAS,CAACc,UAAD,CAAT;AACA,GArC6B,CAuC9B;;;AACA,SAAO;AACNf,IAAAA,MADM;AAENK,IAAAA,YAFM;AAGNQ,IAAAA,SAHM;AAINC,IAAAA;AAJM,GAAP;AAMA;;AAED,eAAehB,OAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nfunction useForm(initial = {}) {\r\n\t// create a state object for our input\r\n\tconst [inputs, setInputs] = useState(initial);\r\n\tconst initialValue = Object.values(initial);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetInputs(initial);\r\n\t}, [initialValue]);\r\n\r\n\tfunction handleChange(e) {\r\n\t\tlet { value, name, type } = e.target;\r\n\t\tif (type === \"number\") {\r\n\t\t\tvalue = Number(value);\r\n\t\t}\r\n\r\n\t\tif (type === \"file\") {\r\n\t\t\t[value] = e.target.files;\r\n\t\t}\r\n\t\tsetInputs({\r\n\t\t\t...inputs,\r\n\t\t\t[name]: value,\r\n\t\t});\r\n\t}\r\n\r\n\tfunction resetForm() {\r\n\t\tsetInputs(initial);\r\n\t}\r\n\r\n\t/*\r\n        take the [input] object and turn it into an array with Object.entries()\r\n        then map through the array and destructure the key and value and for each key, we set the value to empty\r\n    */\r\n\tfunction clearForm() {\r\n\t\tconst blankState = Object.fromEntries(\r\n\t\t\tObject.entries(inputs).map(([key, value]) => [key, \"\"])\r\n\t\t);\r\n\t\tsetInputs(blankState);\r\n\t}\r\n\r\n\t// return the things we want to surface\r\n\treturn {\r\n\t\tinputs,\r\n\t\thandleChange,\r\n\t\tresetForm,\r\n\t\tclearForm,\r\n\t};\r\n}\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}