{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\React\\\\Advanced-React\\\\Advanced-React\\\\sick-fits\\\\frontend\\\\components\\\\Search.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { resetIdCounter, useCombobox } from \"downshift\";\nimport { SearchStyles, DropDown, DropDownItem } from \"./styles/DropDown\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport debounce from \"lodash.debounce\";\nconst SEARCH_PRODUCT_QUERY = gql`\n\tquery SEARCH_PRODUCT_QUERY($searchTerm: String!) {\n\t\tsearchTerm: allProducts(\n\t\t\twhere: {\n\t\t\t\tOR: [\n\t\t\t\t\t{ name_contains_i: $searchTerm }\n\t\t\t\t\t{ description_contains_i: $searchTerm }\n\t\t\t\t]\n\t\t\t}\n\t\t) {\n\t\t\tid\n\t\t\tname\n\t\t\tphoto {\n\t\t\t\timage {\n\t\t\t\t\tpublicUrlTransformed\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n\nfunction Search() {\n  // Instead of doing [useQuery] that happens on page load, we want to instantly query it by command\n  // Always bypass the apollo cache and go straight to the network\n  const [findItems, {\n    data,\n    loading,\n    error\n  }] = useLazyQuery(SEARCH_PRODUCT_QUERY, {\n    //IMPORTANT: if you don't do this, it will only query whatever item is on the current pagination page\n    fetchPolicy: \"no-cache\"\n  });\n  /*\r\n         The purpose of this line of code is to prevent the server from crashing. \r\n         Generally when a user type in the search, each key up event will trigger a call back to the server. When there's excessive\r\n         amount of calls back to the server in a short amount of time, it will DDoS your backend. \r\n  \n         One good way to prevent that from happening is to use [debounce()] and set a timer on howevery many seconds you wanna wait before\r\n         sending the request as a package back to the server instead of sending a request back after every key up event\r\n      */\n\n  const findItemButChillBruh = debounce(findItems, 350); // This takes care any server side rendering issues you may have\n\n  resetIdCounter();\n  const {\n    inputValue,\n    getMenuProps,\n    getInputProps,\n    getComboboxProps,\n    getItemProps\n  } = useCombobox({\n    items: [],\n\n    // Fire when input detected in the search box\n    onInputValueChange() {\n      console.log(\"Input changed\");\n      findItemButChillBruh({\n        variables: {\n          searchTerm: inputValue\n        }\n      });\n    },\n\n    // Fire when someone select an item from dropbown box\n    onSelectedItemChange() {\n      console.log(\"Selected item change\");\n    }\n\n  });\n  const items = (data === null || data === void 0 ? void 0 : data.searchTerm) || [];\n  return /*#__PURE__*/_jsxDEV(SearchStyles, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, getComboboxProps()), {}, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", _objectSpread({}, getInputProps({\n        type: \"search\",\n        placeholder: \"Search for an item\",\n        id: \"search\",\n        className: loading ? \"loading\" : \"\"\n      })), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(DropDown, _objectSpread(_objectSpread({}, getMenuProps()), {}, {\n      children: items.map(item => /*#__PURE__*/_jsxDEV(DropDownItem, _objectSpread(_objectSpread({}, getInputProps({\n        item\n      })), {}, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.photo.image.publicUrlTransformed,\n          alt: item.name,\n          width: \"50px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 7\n        }, this), item.name]\n      }), void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 6\n      }, this))\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 3\n  }, this);\n}\n\nexport default Search;","map":{"version":3,"sources":["D:/React/Advanced-React/Advanced-React/sick-fits/frontend/components/Search.js"],"names":["React","gql","resetIdCounter","useCombobox","SearchStyles","DropDown","DropDownItem","useLazyQuery","debounce","SEARCH_PRODUCT_QUERY","Search","findItems","data","loading","error","fetchPolicy","findItemButChillBruh","inputValue","getMenuProps","getInputProps","getComboboxProps","getItemProps","items","onInputValueChange","console","log","variables","searchTerm","onSelectedItemChange","type","placeholder","id","className","map","item","photo","image","publicUrlTransformed","name"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,WAA5C;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,YAAjC,QAAqD,mBAArD;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,MAAMC,oBAAoB,GAAGR,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBA;;AAqBA,SAASS,MAAT,GAAkB;AACjB;AACA;AACA,QAAM,CAACC,SAAD,EAAY;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,GAAZ,IAAwCP,YAAY,CACzDE,oBADyD,EAEzD;AACC;AACAM,IAAAA,WAAW,EAAE;AAFd,GAFyD,CAA1D;AAQA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,QAAMC,oBAAoB,GAAGR,QAAQ,CAACG,SAAD,EAAY,GAAZ,CAArC,CAnBiB,CAqBjB;;AACAT,EAAAA,cAAc;AACd,QAAM;AACLe,IAAAA,UADK;AAELC,IAAAA,YAFK;AAGLC,IAAAA,aAHK;AAILC,IAAAA,gBAJK;AAKLC,IAAAA;AALK,MAMFlB,WAAW,CAAC;AACfmB,IAAAA,KAAK,EAAE,EADQ;;AAEf;AACAC,IAAAA,kBAAkB,GAAG;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAT,MAAAA,oBAAoB,CAAC;AACpBU,QAAAA,SAAS,EAAE;AACVC,UAAAA,UAAU,EAAEV;AADF;AADS,OAAD,CAApB;AAKA,KAVc;;AAYf;AACAW,IAAAA,oBAAoB,GAAG;AACtBJ,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA;;AAfc,GAAD,CANf;AAwBA,QAAMH,KAAK,GAAG,CAAAV,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEe,UAAN,KAAoB,EAAlC;AAEA,sBACC,QAAC,YAAD;AAAA,4BACC,+CAASP,gBAAgB,EAAzB;AAAA,6BACC,mCACKD,aAAa,CAAC;AACjBU,QAAAA,IAAI,EAAE,QADW;AAEjBC,QAAAA,WAAW,EAAE,oBAFI;AAGjBC,QAAAA,EAAE,EAAE,QAHa;AAIjBC,QAAAA,SAAS,EAAEnB,OAAO,GAAG,SAAH,GAAe;AAJhB,OAAD,CADlB;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD,eAYC,QAAC,QAAD,kCAAcK,YAAY,EAA1B;AAAA,gBACEI,KAAK,CAACW,GAAN,CAAWC,IAAD,iBACV,QAAC,YAAD,kCAAkBf,aAAa,CAAC;AAAEe,QAAAA;AAAF,OAAD,CAA/B;AAAA,gCACC;AACC,UAAA,GAAG,EAAEA,IAAI,CAACC,KAAL,CAAWC,KAAX,CAAiBC,oBADvB;AAEC,UAAA,GAAG,EAAEH,IAAI,CAACI,IAFX;AAGC,UAAA,KAAK,EAAC;AAHP;AAAA;AAAA;AAAA;AAAA,gBADD,EAMEJ,IAAI,CAACI,IANP;AAAA;AAAA;AAAA;AAAA;AAAA,cADA;AADF;AAAA;AAAA;AAAA;AAAA,YAZD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AA2BA;;AAED,eAAe5B,MAAf","sourcesContent":["import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { resetIdCounter, useCombobox } from \"downshift\";\r\nimport { SearchStyles, DropDown, DropDownItem } from \"./styles/DropDown\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport debounce from \"lodash.debounce\";\r\n\r\nconst SEARCH_PRODUCT_QUERY = gql`\r\n\tquery SEARCH_PRODUCT_QUERY($searchTerm: String!) {\r\n\t\tsearchTerm: allProducts(\r\n\t\t\twhere: {\r\n\t\t\t\tOR: [\r\n\t\t\t\t\t{ name_contains_i: $searchTerm }\r\n\t\t\t\t\t{ description_contains_i: $searchTerm }\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t) {\r\n\t\t\tid\r\n\t\t\tname\r\n\t\t\tphoto {\r\n\t\t\t\timage {\r\n\t\t\t\t\tpublicUrlTransformed\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nfunction Search() {\r\n\t// Instead of doing [useQuery] that happens on page load, we want to instantly query it by command\r\n\t// Always bypass the apollo cache and go straight to the network\r\n\tconst [findItems, { data, loading, error }] = useLazyQuery(\r\n\t\tSEARCH_PRODUCT_QUERY,\r\n\t\t{\r\n\t\t\t//IMPORTANT: if you don't do this, it will only query whatever item is on the current pagination page\r\n\t\t\tfetchPolicy: \"no-cache\",\r\n\t\t}\r\n\t);\r\n\r\n\t/*\r\n        The purpose of this line of code is to prevent the server from crashing. \r\n        Generally when a user type in the search, each key up event will trigger a call back to the server. When there's excessive\r\n        amount of calls back to the server in a short amount of time, it will DDoS your backend. \r\n\r\n        One good way to prevent that from happening is to use [debounce()] and set a timer on howevery many seconds you wanna wait before\r\n        sending the request as a package back to the server instead of sending a request back after every key up event\r\n     */\r\n\tconst findItemButChillBruh = debounce(findItems, 350);\r\n\r\n\t// This takes care any server side rendering issues you may have\r\n\tresetIdCounter();\r\n\tconst {\r\n\t\tinputValue,\r\n\t\tgetMenuProps,\r\n\t\tgetInputProps,\r\n\t\tgetComboboxProps,\r\n\t\tgetItemProps,\r\n\t} = useCombobox({\r\n\t\titems: [],\r\n\t\t// Fire when input detected in the search box\r\n\t\tonInputValueChange() {\r\n\t\t\tconsole.log(\"Input changed\");\r\n\t\t\tfindItemButChillBruh({\r\n\t\t\t\tvariables: {\r\n\t\t\t\t\tsearchTerm: inputValue,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t// Fire when someone select an item from dropbown box\r\n\t\tonSelectedItemChange() {\r\n\t\t\tconsole.log(\"Selected item change\");\r\n\t\t},\r\n\t});\r\n\r\n\tconst items = data?.searchTerm || [];\r\n\r\n\treturn (\r\n\t\t<SearchStyles>\r\n\t\t\t<div {...getComboboxProps()}>\r\n\t\t\t\t<input\r\n\t\t\t\t\t{...getInputProps({\r\n\t\t\t\t\t\ttype: \"search\",\r\n\t\t\t\t\t\tplaceholder: \"Search for an item\",\r\n\t\t\t\t\t\tid: \"search\",\r\n\t\t\t\t\t\tclassName: loading ? \"loading\" : \"\",\r\n\t\t\t\t\t})}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\r\n\t\t\t<DropDown {...getMenuProps()}>\r\n\t\t\t\t{items.map((item) => (\r\n\t\t\t\t\t<DropDownItem {...getInputProps({ item })}>\r\n\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tsrc={item.photo.image.publicUrlTransformed}\r\n\t\t\t\t\t\t\talt={item.name}\r\n\t\t\t\t\t\t\twidth=\"50px\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{item.name}\r\n\t\t\t\t\t</DropDownItem>\r\n\t\t\t\t))}\r\n\t\t\t</DropDown>\r\n\t\t</SearchStyles>\r\n\t);\r\n}\r\n\r\nexport default Search;\r\n"]},"metadata":{},"sourceType":"module"}