{"ast":null,"code":"import React from \"react\";\nimport { PAGINATION_QUERY } from \"../components/Pagination\";\n\nfunction paginationField() {\n  return {\n    keyArgs: false,\n    // Tells Apollo that I will take care everything\n    // args: The skip value that's passed in    cache: Apollo cache\n    read: function read() {\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      console.log({\n        existing: existing,\n        args: args,\n        cache: cache\n      });\n      var skip = args.skip,\n          first = args.first; //Read the number of items on the page from the cache\n\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      console.log({\n        data: data\n      }); // When Apollo tries to query for all Products, it will first ask the read function for those items\n      // Either do 1 of 2 things:\n      // 1. Return the items because they are already in the cache\n      // OR\n      // 2. Return false from here [create a network request]\n    },\n    marge: function marge() {// This runs when the Apollo client comes back from the Keystone with the products\n    }\n  };\n}\n\nexport default paginationField;","map":{"version":3,"sources":["D:/React/Advanced-React/Advanced-React/sick-fits/frontend/lib/paginationField.js"],"names":["React","PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","console","log","skip","first","data","readQuery","query","marge"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,0BAAjC;;AAEA,SAASC,eAAT,GAA2B;AAC1B,SAAO;AACNC,IAAAA,OAAO,EAAE,KADH;AACU;AAEhB;AACAC,IAAAA,IAJM,kBAI+B;AAAA,UAAhCC,QAAgC,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AACpCC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEJ,QAAAA,QAAQ,EAARA,QAAF;AAAYC,QAAAA,IAAI,EAAJA,IAAZ;AAAkBC,QAAAA,KAAK,EAALA;AAAlB,OAAZ;AADoC,UAE5BG,IAF4B,GAEZJ,IAFY,CAE5BI,IAF4B;AAAA,UAEtBC,KAFsB,GAEZL,IAFY,CAEtBK,KAFsB,EAIpC;;AACA,UAAMC,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEb;AAAT,OAAhB,CAAb;AAEAO,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEG,QAAAA,IAAI,EAAJA;AAAF,OAAZ,EAPoC,CAQpC;AAEA;AAEA;AAEA;AAEA;AACA,KArBK;AAsBNG,IAAAA,KAtBM,mBAsBE,CACP;AACA;AAxBK,GAAP;AA0BA;;AAED,eAAeb,eAAf","sourcesContent":["import React from \"react\";\r\nimport { PAGINATION_QUERY } from \"../components/Pagination\";\r\n\r\nfunction paginationField() {\r\n\treturn {\r\n\t\tkeyArgs: false, // Tells Apollo that I will take care everything\r\n\r\n\t\t// args: The skip value that's passed in    cache: Apollo cache\r\n\t\tread(existing = [], { args, cache }) {\r\n\t\t\tconsole.log({ existing, args, cache });\r\n\t\t\tconst { skip, first } = args;\r\n\r\n\t\t\t//Read the number of items on the page from the cache\r\n\t\t\tconst data = cache.readQuery({ query: PAGINATION_QUERY });\r\n\r\n\t\t\tconsole.log({ data });\r\n\t\t\t// When Apollo tries to query for all Products, it will first ask the read function for those items\r\n\r\n\t\t\t// Either do 1 of 2 things:\r\n\r\n\t\t\t// 1. Return the items because they are already in the cache\r\n\r\n\t\t\t// OR\r\n\r\n\t\t\t// 2. Return false from here [create a network request]\r\n\t\t},\r\n\t\tmarge() {\r\n\t\t\t// This runs when the Apollo client comes back from the Keystone with the products\r\n\t\t},\r\n\t};\r\n}\r\n\r\nexport default paginationField;\r\n"]},"metadata":{},"sourceType":"module"}