{"ast":null,"code":"import _defineProperty from \"D:/React/Advanced-React/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"D:/React/Advanced-React/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"D:/React/Advanced-React/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"D:\\\\React\\\\Advanced-React\\\\Advanced-React\\\\sick-fits\\\\frontend\\\\components\\\\Search.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\tquery SEARCH_PRODUCT_QUERY($searchTerm: String!) {\\n\\t\\tsearchTerm: allProducts(\\n\\t\\t\\twhere: {\\n\\t\\t\\t\\tOR: [\\n\\t\\t\\t\\t\\t{ name_contains_i: $searchTerm }\\n\\t\\t\\t\\t\\t{ description_contains_i: $searchTerm }\\n\\t\\t\\t\\t]\\n\\t\\t\\t}\\n\\t\\t) {\\n\\t\\t\\tid\\n\\t\\t\\tname\\n\\t\\t\\tphoto {\\n\\t\\t\\t\\timage {\\n\\t\\t\\t\\t\\tpublicUrlTransformed\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { resetIdCounter, useCombobox } from \"downshift\";\nimport { SearchStyles, DropDown, DropDownItem } from \"./styles/DropDown\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport debounce from \"lodash.debounce\";\nvar SEARCH_PRODUCT_QUERY = gql(_templateObject());\n\nfunction Search() {\n  _s();\n\n  // Instead of doing [useQuery] that happens on page load, we want to instantly query it by command\n  // Always bypass the apollo cache and go straight to the network\n  var _useLazyQuery = useLazyQuery(SEARCH_PRODUCT_QUERY, {\n    //IMPORTANT: if you don't do this, it will only query whatever item is on the current pagination page\n    fetchPolicy: \"no-cache\"\n  }),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n      searchTerm = _useLazyQuery2[0],\n      _useLazyQuery2$ = _useLazyQuery2[1],\n      data = _useLazyQuery2$.data,\n      loading = _useLazyQuery2$.loading,\n      error = _useLazyQuery2$.error;\n  /*\r\n         The purpose of this line of code is to prevent the server from crashing. \r\n         Generally when a user type in the search, each key up event will trigger a call back to the server. When there's excessive\r\n         amount of calls back to the server in a short amount of time, it will DDoS your backend. \r\n  \n         One good way to prevent that from happening is to use [debounce()] and set a timer on howevery many seconds you wanna wait before\r\n         sending the request as a package back to the server instead of sending a request back after every key up event\r\n      */\n\n\n  var findItemButChillBruh = debounce(searchTerm, 350); // This takes care any server side rendering issues you may have\n\n  resetIdCounter();\n\n  var _useCombobox = useCombobox({\n    items: [],\n    // Fire when input detected in the search box\n    onInputValueChange: function onInputValueChange() {\n      console.log(\"Input changed\");\n    },\n    // Fire when someone select an item from dropbown box\n    onSelectedItemChange: function onSelectedItemChange() {\n      console.log(\"Selected item change\");\n    }\n  }),\n      getMenuProps = _useCombobox.getMenuProps,\n      getInputProps = _useCombobox.getInputProps,\n      getComboboxProps = _useCombobox.getComboboxProps;\n\n  return /*#__PURE__*/_jsxDEV(SearchStyles, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, getComboboxProps()), {}, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", _objectSpread({}, getInputProps({\n        type: \"search\",\n        placeholder: \"Search for an item\",\n        id: \"search\",\n        className: \"loading\"\n      })), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(DropDown, _objectSpread(_objectSpread({}, getMenuProps()), {}, {\n      children: [/*#__PURE__*/_jsxDEV(DropDownItem, {\n        children: \"Woah\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(DropDownItem, {\n        children: \"Woah\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(DropDownItem, {\n        children: \"Woah\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Search, \"JUdk6B4NRWlg1Or6dQ5AvQoTSFk=\", false, function () {\n  return [useLazyQuery, useCombobox];\n});\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["D:/React/Advanced-React/Advanced-React/sick-fits/frontend/components/Search.js"],"names":["React","gql","resetIdCounter","useCombobox","SearchStyles","DropDown","DropDownItem","useLazyQuery","debounce","SEARCH_PRODUCT_QUERY","Search","fetchPolicy","searchTerm","data","loading","error","findItemButChillBruh","items","onInputValueChange","console","log","onSelectedItemChange","getMenuProps","getInputProps","getComboboxProps","type","placeholder","id","className"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,WAA5C;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,YAAjC,QAAqD,mBAArD;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,IAAMC,oBAAoB,GAAGR,GAAH,mBAA1B;;AAqBA,SAASS,MAAT,GAAkB;AAAA;;AACjB;AACA;AAFiB,sBAG8BH,YAAY,CAC1DE,oBAD0D,EAE1D;AACC;AACAE,IAAAA,WAAW,EAAE;AAFd,GAF0D,CAH1C;AAAA;AAAA,MAGVC,UAHU;AAAA;AAAA,MAGIC,IAHJ,mBAGIA,IAHJ;AAAA,MAGUC,OAHV,mBAGUA,OAHV;AAAA,MAGmBC,KAHnB,mBAGmBA,KAHnB;AAWjB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,MAAMC,oBAAoB,GAAGR,QAAQ,CAACI,UAAD,EAAa,GAAb,CAArC,CAnBiB,CAqBjB;;AACAV,EAAAA,cAAc;;AAtBG,qBAuByCC,WAAW,CAAC;AACrEc,IAAAA,KAAK,EAAE,EAD8D;AAErE;AACAC,IAAAA,kBAHqE,gCAGhD;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,KALoE;AAMrE;AACAC,IAAAA,oBAPqE,kCAO9C;AACtBF,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA;AAToE,GAAD,CAvBpD;AAAA,MAuBTE,YAvBS,gBAuBTA,YAvBS;AAAA,MAuBKC,aAvBL,gBAuBKA,aAvBL;AAAA,MAuBoBC,gBAvBpB,gBAuBoBA,gBAvBpB;;AAmCjB,sBACC,QAAC,YAAD;AAAA,4BACC,+CAASA,gBAAgB,EAAzB;AAAA,6BACC,mCACKD,aAAa,CAAC;AACjBE,QAAAA,IAAI,EAAE,QADW;AAEjBC,QAAAA,WAAW,EAAE,oBAFI;AAGjBC,QAAAA,EAAE,EAAE,QAHa;AAIjBC,QAAAA,SAAS,EAAE;AAJM,OAAD,CADlB;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD,eAYC,QAAC,QAAD,kCAAcN,YAAY,EAA1B;AAAA,8BACC,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAGC,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHD,eAKC,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALD;AAAA;AAAA;AAAA;AAAA;AAAA,YAZD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAsBA;;GAzDQZ,M;UAGuCH,Y,EAoBWJ,W;;;KAvBlDO,M;AA2DT,eAAeA,MAAf","sourcesContent":["import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { resetIdCounter, useCombobox } from \"downshift\";\r\nimport { SearchStyles, DropDown, DropDownItem } from \"./styles/DropDown\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport debounce from \"lodash.debounce\";\r\n\r\nconst SEARCH_PRODUCT_QUERY = gql`\r\n\tquery SEARCH_PRODUCT_QUERY($searchTerm: String!) {\r\n\t\tsearchTerm: allProducts(\r\n\t\t\twhere: {\r\n\t\t\t\tOR: [\r\n\t\t\t\t\t{ name_contains_i: $searchTerm }\r\n\t\t\t\t\t{ description_contains_i: $searchTerm }\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t) {\r\n\t\t\tid\r\n\t\t\tname\r\n\t\t\tphoto {\r\n\t\t\t\timage {\r\n\t\t\t\t\tpublicUrlTransformed\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nfunction Search() {\r\n\t// Instead of doing [useQuery] that happens on page load, we want to instantly query it by command\r\n\t// Always bypass the apollo cache and go straight to the network\r\n\tconst [searchTerm, { data, loading, error }] = useLazyQuery(\r\n\t\tSEARCH_PRODUCT_QUERY,\r\n\t\t{\r\n\t\t\t//IMPORTANT: if you don't do this, it will only query whatever item is on the current pagination page\r\n\t\t\tfetchPolicy: \"no-cache\",\r\n\t\t}\r\n\t);\r\n\r\n\t/*\r\n        The purpose of this line of code is to prevent the server from crashing. \r\n        Generally when a user type in the search, each key up event will trigger a call back to the server. When there's excessive\r\n        amount of calls back to the server in a short amount of time, it will DDoS your backend. \r\n\r\n        One good way to prevent that from happening is to use [debounce()] and set a timer on howevery many seconds you wanna wait before\r\n        sending the request as a package back to the server instead of sending a request back after every key up event\r\n     */\r\n\tconst findItemButChillBruh = debounce(searchTerm, 350);\r\n\r\n\t// This takes care any server side rendering issues you may have\r\n\tresetIdCounter();\r\n\tconst { getMenuProps, getInputProps, getComboboxProps } = useCombobox({\r\n\t\titems: [],\r\n\t\t// Fire when input detected in the search box\r\n\t\tonInputValueChange() {\r\n\t\t\tconsole.log(\"Input changed\");\r\n\t\t},\r\n\t\t// Fire when someone select an item from dropbown box\r\n\t\tonSelectedItemChange() {\r\n\t\t\tconsole.log(\"Selected item change\");\r\n\t\t},\r\n\t});\r\n\r\n\treturn (\r\n\t\t<SearchStyles>\r\n\t\t\t<div {...getComboboxProps()}>\r\n\t\t\t\t<input\r\n\t\t\t\t\t{...getInputProps({\r\n\t\t\t\t\t\ttype: \"search\",\r\n\t\t\t\t\t\tplaceholder: \"Search for an item\",\r\n\t\t\t\t\t\tid: \"search\",\r\n\t\t\t\t\t\tclassName: \"loading\",\r\n\t\t\t\t\t})}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\r\n\t\t\t<DropDown {...getMenuProps()}>\r\n\t\t\t\t<DropDownItem>Woah</DropDownItem>\r\n\r\n\t\t\t\t<DropDownItem>Woah</DropDownItem>\r\n\r\n\t\t\t\t<DropDownItem>Woah</DropDownItem>\r\n\t\t\t</DropDown>\r\n\t\t</SearchStyles>\r\n\t);\r\n}\r\n\r\nexport default Search;\r\n"]},"metadata":{},"sourceType":"module"}