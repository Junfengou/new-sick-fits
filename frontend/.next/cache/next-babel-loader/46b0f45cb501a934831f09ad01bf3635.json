{"ast":null,"code":"import _regeneratorRuntime from \"D:/React/Advanced-React/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/React/Advanced-React/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:/React/Advanced-React/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"D:/React/Advanced-React/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\React\\\\Advanced-React\\\\Advanced-React\\\\sick-fits\\\\frontend\\\\components\\\\UpdateProduct.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n\\tmutation UPDATE_PRODUCT_MUTATION(\\n\\t\\t$id: ID!\\n\\t\\t$name: String\\n\\t\\t$description: String\\n\\t\\t$price: Int\\n\\t) {\\n\\t\\tupdateProduct(\\n\\t\\t\\tid: $id\\n\\t\\t\\tdata: { name: $name, description: $description, price: $price }\\n\\t\\t) {\\n\\t\\t\\tid\\n\\t\\t\\tname\\n\\t\\t\\tdescription\\n\\t\\t\\tprice\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\tquery SINGLE_PRODUCT_QUERY($id: ID!) {\\n\\t\\tProduct(where: { id: $id }) {\\n\\t\\t\\tid\\n\\t\\t\\tname\\n\\t\\t\\tdescription\\n\\t\\t\\tprice\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport useForm from \"../lib/useForm\";\nimport DisplayError from \"./ErrorMessage\";\nimport Form from \"./styles/Form\";\nvar SINGLE_PRODUCT_QUERY = gql(_templateObject());\nvar UPDATE_PRODUCT_MUTATION = gql(_templateObject2());\nexport default function UpdateProduct(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  // 1. We need to get the existing product\n  var _useQuery = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading; // 2. We need to get the mutation to update the product\n\n\n  var _useMutation = useMutation(UPDATE_PRODUCT_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateProduct = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      updateData = _useMutation2$.data,\n      updateError = _useMutation2$.errror,\n      updateLoading = _useMutation2$.loading; // 2.5 Create some state for the form inputs:\n\n\n  var _useForm = useForm(data === null || data === void 0 ? void 0 : data.Product),\n      inputs = _useForm.inputs,\n      handleChange = _useForm.handleChange,\n      clearForm = _useForm.clearForm,\n      resetForm = _useForm.resetForm;\n\n  console.log(inputs);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 22\n  }, this); // 3. We need the form to handle the updates\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                _context.next = 3;\n                return updateProduct({\n                  variables: {\n                    id: id,\n                    name: inputs.name,\n                    description: inputs.description,\n                    price: inputs.price\n                  }\n                })[\"catch\"](console.error);\n\n              case 3:\n                res = _context.sent;\n                console.log(res); // Submit the inputfields to the backend:\n                // TODO: Handle Submit!!!\n                // const res = await createProduct();\n                // clearForm();\n                // // Go to that product's page!\n                // Router.push({\n                //   pathname: `/product/${res.data.createProduct.id}`,\n                // });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    children: [/*#__PURE__*/_jsxDEV(DisplayError, {\n      error: error || updateError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      disabled: updateLoading,\n      \"aria-busy\": updateLoading,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          placeholder: \"Name\",\n          value: inputs.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"price\",\n        children: [\"Price\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"price\",\n          name: \"price\",\n          placeholder: \"price\",\n          value: inputs.price,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: [\"Description\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: inputs.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 3\n  }, this);\n}\n\n_s(UpdateProduct, \"O7KMWQrxt9eEtev/4KHDWosmDY8=\", false, function () {\n  return [useQuery, useMutation, useForm];\n});\n\n_c = UpdateProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateProduct\");","map":{"version":3,"sources":["D:/React/Advanced-React/Advanced-React/sick-fits/frontend/components/UpdateProduct.js"],"names":["useMutation","useQuery","gql","useForm","DisplayError","Form","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","UpdateProduct","id","variables","data","error","loading","updateProduct","updateData","updateError","errror","updateLoading","Product","inputs","handleChange","clearForm","resetForm","console","log","e","preventDefault","name","description","price","res"],"mappings":"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","sourcesContent":["import { useMutation, useQuery } from \"@apollo/client\";\r\nimport gql from \"graphql-tag\";\r\nimport useForm from \"../lib/useForm\";\r\nimport DisplayError from \"./ErrorMessage\";\r\nimport Form from \"./styles/Form\";\r\n\r\nconst SINGLE_PRODUCT_QUERY = gql`\r\n\tquery SINGLE_PRODUCT_QUERY($id: ID!) {\r\n\t\tProduct(where: { id: $id }) {\r\n\t\t\tid\r\n\t\t\tname\r\n\t\t\tdescription\r\n\t\t\tprice\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst UPDATE_PRODUCT_MUTATION = gql`\r\n\tmutation UPDATE_PRODUCT_MUTATION(\r\n\t\t$id: ID!\r\n\t\t$name: String\r\n\t\t$description: String\r\n\t\t$price: Int\r\n\t) {\r\n\t\tupdateProduct(\r\n\t\t\tid: $id\r\n\t\t\tdata: { name: $name, description: $description, price: $price }\r\n\t\t) {\r\n\t\t\tid\r\n\t\t\tname\r\n\t\t\tdescription\r\n\t\t\tprice\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport default function UpdateProduct({ id }) {\r\n\t// 1. We need to get the existing product\r\n\tconst { data, error, loading } = useQuery(SINGLE_PRODUCT_QUERY, {\r\n\t\tvariables: { id },\r\n\t});\r\n\t// 2. We need to get the mutation to update the product\r\n\tconst [\r\n\t\tupdateProduct,\r\n\t\t{ data: updateData, errror: updateError, loading: updateLoading },\r\n\t] = useMutation(UPDATE_PRODUCT_MUTATION);\r\n\t// 2.5 Create some state for the form inputs:\r\n\tconst { inputs, handleChange, clearForm, resetForm } = useForm(data?.Product);\r\n\tconsole.log(inputs);\r\n\tif (loading) return <p>loading...</p>;\r\n\t// 3. We need the form to handle the updates\r\n\treturn (\r\n\t\t<Form\r\n\t\t\tonSubmit={async (e) => {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tconst res = await updateProduct({\r\n\t\t\t\t\tvariables: {\r\n\t\t\t\t\t\tid,\r\n\t\t\t\t\t\tname: inputs.name,\r\n\t\t\t\t\t\tdescription: inputs.description,\r\n\t\t\t\t\t\tprice: inputs.price,\r\n\t\t\t\t\t},\r\n\t\t\t\t}).catch(console.error);\r\n\t\t\t\tconsole.log(res);\r\n\t\t\t\t// Submit the inputfields to the backend:\r\n\t\t\t\t// TODO: Handle Submit!!!\r\n\t\t\t\t// const res = await createProduct();\r\n\t\t\t\t// clearForm();\r\n\t\t\t\t// // Go to that product's page!\r\n\t\t\t\t// Router.push({\r\n\t\t\t\t//   pathname: `/product/${res.data.createProduct.id}`,\r\n\t\t\t\t// });\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<DisplayError error={error || updateError} />\r\n\t\t\t<fieldset disabled={updateLoading} aria-busy={updateLoading}>\r\n\t\t\t\t<label htmlFor=\"name\">\r\n\t\t\t\t\tName\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tid=\"name\"\r\n\t\t\t\t\t\tname=\"name\"\r\n\t\t\t\t\t\tplaceholder=\"Name\"\r\n\t\t\t\t\t\tvalue={inputs.name}\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</label>\r\n\t\t\t\t<label htmlFor=\"price\">\r\n\t\t\t\t\tPrice\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\tid=\"price\"\r\n\t\t\t\t\t\tname=\"price\"\r\n\t\t\t\t\t\tplaceholder=\"price\"\r\n\t\t\t\t\t\tvalue={inputs.price}\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</label>\r\n\t\t\t\t<label htmlFor=\"description\">\r\n\t\t\t\t\tDescription\r\n\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tid=\"description\"\r\n\t\t\t\t\t\tname=\"description\"\r\n\t\t\t\t\t\tplaceholder=\"Description\"\r\n\t\t\t\t\t\tvalue={inputs.description}\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</label>\r\n\r\n\t\t\t\t<button type=\"submit\">Update Product</button>\r\n\t\t\t</fieldset>\r\n\t\t</Form>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}